// Code generated by avo.go. DO NOT EDIT.

//go:build !amd64 || purego

package vectorcmp

func VectorEquals8(dstMask []byte, b uint8, rows []uint8) {
	goVectorEquals(dstMask, b, rows)
}
func VectorGreaterThan8(dstMask []byte, b uint8, rows []uint8) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorLessThan8(dstMask []byte, b uint8, rows []uint8) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorGreaterEquals8(dstMask []byte, b uint8, rows []uint8) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorLesserEquals8(dstMask []byte, b uint8, rows []uint8) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorEquals16(dstMask []byte, b uint16, rows []uint16) {
	goVectorEquals(dstMask, b, rows)
}
func VectorGreaterThan16(dstMask []byte, b uint16, rows []uint16) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorLessThan16(dstMask []byte, b uint16, rows []uint16) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorGreaterEquals16(dstMask []byte, b uint16, rows []uint16) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorLesserEquals16(dstMask []byte, b uint16, rows []uint16) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorEquals32(dstMask []byte, b uint32, rows []uint32) {
	goVectorEquals(dstMask, b, rows)
}
func VectorEqualsFloat32(dstMask []byte, b float32, rows []float32) {
	goVectorEquals(dstMask, b, rows)
}
func VectorGreaterThan32(dstMask []byte, b uint32, rows []uint32) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorGreaterThanFloat32(dstMask []byte, b float32, rows []float32) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorLessThan32(dstMask []byte, b uint32, rows []uint32) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorLessThanFloat32(dstMask []byte, b float32, rows []float32) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorGreaterEquals32(dstMask []byte, b uint32, rows []uint32) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorGreaterEqualsFloat32(dstMask []byte, b float32, rows []float32) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorLesserEquals32(dstMask []byte, b uint32, rows []uint32) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorLesserEqualsFloat32(dstMask []byte, b float32, rows []float32) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorEquals64(dstMask []byte, b uint64, rows []uint64) {
	goVectorEquals(dstMask, b, rows)
}
func VectorEqualsFloat64(dstMask []byte, b float64, rows []float64) {
	goVectorEquals(dstMask, b, rows)
}
func VectorGreaterThan64(dstMask []byte, b uint64, rows []uint64) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorGreaterThanFloat64(dstMask []byte, b float64, rows []float64) {
	goVectorGreaterThan(dstMask, b, rows)
}
func VectorLessThan64(dstMask []byte, b uint64, rows []uint64) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorLessThanFloat64(dstMask []byte, b float64, rows []float64) {
	goVectorLessThan(dstMask, b, rows)
}
func VectorGreaterEquals64(dstMask []byte, b uint64, rows []uint64) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorGreaterEqualsFloat64(dstMask []byte, b float64, rows []float64) {
	goVectorGreaterEquals(dstMask, b, rows)
}
func VectorLesserEquals64(dstMask []byte, b uint64, rows []uint64) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorLesserEqualsFloat64(dstMask []byte, b float64, rows []float64) {
	goVectorLesserEquals(dstMask, b, rows)
}
func VectorIsNaNFloat32(dstMask []byte, rows []float32) {
	goVectorIsNaN(dstMask, rows)
}
func VectorIsNaNFloat64(dstMask []byte, rows []float64) {
	goVectorIsNaN(dstMask, rows)
}
